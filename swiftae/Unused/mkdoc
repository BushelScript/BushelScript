#!/usr/bin/python
# -*- coding: utf-8 -*-

""" Generate HTML user guide (doc-html) from Markdown files (doc-source). 
    
    Requires Markdown2:
    
        sudo easy_install markdown2

Notes:

* Use 2-space indent for <pre><code>...</code></pre> blocks and paragraphs within an <li>...</li> block.

* Use 2-space indent for code lines within a code block statement. Use 4-space indent for soft-wrapped code lines.

"""

import os, os.path, re, shutil, sys
from markdown2 import markdown

kPageTemplate = u'''\
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
    <head>
        <title>{title}</title>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <style type="text/css" media="all"><!--@import url(full.css);--></style>
    </head>
    <body>
        <div id="wrap">
            <div id="main">
                <h1>{heading}</h1>
                <div class="navbar">{navbar}</div>
                {content}
            </div>
        </div>
        <div id="footer"><div class="navbar">{navbar}</div></div>
    </body>
</html>
'''
kNavlink = u'<a href="{}">{}</a>'

def esc(s):
    return s.replace(u'&', u'&amp;').replace(u'<', u'&lt;').replace(u'>', u'&gt;').replace(u'"', u'&quot;')

def  render_toc(pages): # (url, title, content)
    navbar = kNavlink.format(pages[0][1], u'next')
    toc = u'<h2>Table of contents</h2>\n<ol>\n{}</ol>'.format(
            u'\n'.join(u'\t<li><a href="{}">{}</a></li>\n'.format(p[1], esc(p[2])) for p in pages))
    return kPageTemplate.format(title=u'SwiftAutomation', heading=u'SwiftAutomation', navbar=navbar, content=toc)

def render_page(links, title, content):
    return kPageTemplate.format(title=u'SwiftAutomation | '+esc(title), heading=esc(title),
            navbar=u' | '.join(kNavlink.format(url, esc(title)) for url, title in links), 
            content=markdown(content.strip(), tab_width=2) )
    
def write(destdir, name, html):
    with open(os.path.join(destdir, name), 'w') as f:
        f.write(html.encode('utf-8'))


def render(sourcedir, destdir):
    if not os.path.exists(destdir):
        os.mkdir(destdir)
    pages = []
    for name in os.listdir(sourcedir):
        inpath = os.path.join(sourcedir, name)
        if name.endswith('.md'):
            idx, newname = name.split(' ', 1)
            outpath = os.path.join(destdir, )
            with open(inpath) as f:
                title, content = f.read().decode('utf-8').strip().split('\n', 1)
                pages.append((int(idx), newname.rstrip('md')+'html', title.strip('# '), content.lstrip()))
        else: # copy other files directly
            shutil.copyfile(inpath, os.path.join(destdir, name))
    pages.sort()
    write(destdir, 'index.html', render_toc(pages))
    for i, (idx, newname, title, content) in enumerate(pages):
        if i == 0:
            next = pages[i+1]
            links = [('index.html', 'index'), (next[1], 'next')]
        elif i == len(pages)-1:
            prev = pages[i-1]
            links = [(prev[1], 'back'), ('index.html', 'index')]
        else:
            prev = pages[i-1]
            next = pages[i+1]
            links = [(prev[1], 'back'), ('index.html', 'index'), (next[1], 'next')]
        write(destdir, newname, render_page(links, title, content))




if __name__ == '__main__':
    if len(sys.argv) != 3:
        src, dest = 'doc-source', 'doc-generated'
    else:
        src, dest = sys.argv[1:]
    sourcedir = os.path.abspath(os.path.expanduser(src.decode('utf-8')))
    destdir = os.path.abspath(os.path.expanduser(dest.decode('utf-8')))
    render(sourcedir, destdir)


